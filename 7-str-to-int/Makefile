### LEETCODE PRACTICE MAKEFILE ###

#COMPILATION STEPS
# 1. Prepossessing
#	 gcc -E main.c -Iinclude -DMODE=1 -o main.i
#
# 2. Compilation
#	 gcc -S main.i -std=c11 -O2 -o main.s
#
# 3. Assemble
#	 gcc -c main.s -o main.o
#
# 4. Linking
#	 gcc main.o utils.o -o app -L/path/to/libs -lm

# Compiler
CC			:= gcc
# Explanation: Using GCC as the C compiler

# Compilation flags
CFLAGS		:= -Wall -Wextra -Wpedantic -std=c11 -O0 -g -MMD -MP
# Explanation: 
# 	-Wall: Enable all standard warnings
# 	-Wextra: Enable extra warnings
# 	-Wpedantic: Enforce strict ISO compliance
# 	-std=c11: Use the C11 standard
# 	-O0: No optimization (use -O2 or -O3 for optimization)
# 	-g: Include debugging information
# 	-MMD -MP: Generate dependency files for Makefile

# Preprocessor flags
CPPFLAGS	:= -Iinclude -DMODE=1
# Explanation:
# 	-Iinclude: Add 'include' directory to the list of directories to be searched for
# 	-DMODE=1: Define a preprocessor macro MODE with value 1

# Source files
SRCS		:= $(wildcard src/*.c)
# Explanation:
# 	$(wildcard src/*.c): Get all .c files in the src directory
# 	You can also manually list files like: src/main.c src/utils.c

# Object files
OBJS		:= $(SRCS:.c=.o)
# Explanation:
# 	Convert source file names from .c to .o for object files

# Dependency files
DEPS		:= $(OBJS:.o=.d)
# Explanation:
# 	Convert object file names from .o to .d for dependency files
# 	These files will be generated by the compiler
# 	They help in tracking header file dependencies

# Executable name
TARGET		:= solution
# Explanation:
# 	Name of the final executable

# Default target
sol: $(OBJS)
	$(CC) -o $@ $^
# Explanation:
# 	$@: The target name (sol)
# 	$^: All prerequisites (object files)

# Pattern rule for compiling .c files to .o files
%.o: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
# Explanation:
# 	$<: The first prerequisite (source file)
# 	$@: The target name (object file)
# 	-c: Compile only, do not link

-include $(DEPS)

.PHONY: clean run
clean:
	rm -f src/*.o src/*.d sol
# Explanation:
# 	Remove all object files, dependency files, and the executable

run: sol
	./sol
# Explanation:
# 	Run the executable
# 	Ensure the executable is built before running	

# End of Makefile